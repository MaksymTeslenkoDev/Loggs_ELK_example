services: 
  elasticsearch:
    container_name: elasticsearch
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.23
    ports:
      - "9200:9200"
      - "9300:9300"
    env_file:
      - .env
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - ELASTIC_PASSWORD=root
    volumes:
      - esdata:/usr/share/elasticsearch/data
    networks:
      - logs_network
    restart: unless-stopped

  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:7.17.23
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=elastic
      - ELASTICSEARCH_PASSWORD=root
    depends_on:
      - elasticsearch
    networks:
      - logs_network
    restart: unless-stopped

  logstash:
    container_name: logstash
    image: docker.elastic.co/logstash/logstash:7.17.23
    ports:
      - "5000:5000"
      - "5044:5044"
      - "9600:9600"
    volumes:
      - ./logstash/config:/usr/share/logstash/pipeline/
    labels:
      - "app.name=logstash"
    depends_on:
      - elasticsearch
    networks:
      - logs_network
    restart: unless-stopped

  filebeat_mysql:
    image: docker.elastic.co/beats/filebeat:8.15.1
    container_name: filebeat_mysql
    user: root
    volumes:
      - ./filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro
      - mysql:/var/lib/mysql:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - mysql-registry:/usr/share/filebeat/data:rw
    command: filebeat -e -strict.perms=false
    labels:
      - "app.name=Filebeat MySQL Application"
    ports:
      - "5066:5066"
    depends_on:
      - logstash
      - mysql
    networks:
      - logs_network
    restart: unless-stopped
  
  filebeat_node:
    image: docker.elastic.co/beats/filebeat:8.15.1
    container_name: filebeat_node
    user: root
    volumes:
      - ./filebeat/config/filebeat_app.yml:/usr/share/filebeat/filebeat.yml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - app-registry:/usr/share/filebeat/data:rw
    command: filebeat -e -strict.perms=false
    labels:
      - "app.name=Filebeat Node Application"
    ports:
      - "5067:5066"
    depends_on:
      - logstash
      - nodeapp
    networks:
      - logs_network
    restart: unless-stopped

  mysql:
    image: mysql:8.4
    container_name: mysql
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: store
      MYSQL_USER: marcus
      MYSQL_PASSWORD: marcus
    ports:
      - "3306:3306"
    volumes:
      - mysql:/var/lib/mysql
    command: >
      --slow_query_log=ON
      --slow_query_log_file=/var/lib/mysql/slow.log
      --long_query_time=1
    networks:
      - logs_network
    restart: unless-stopped
  
  nodeapp:
    container_name: nodeapp
    build:
      context: ./app
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - mysql
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - logs_network
    restart: unless-stopped
  
  influxdb:
    image: influxdb:1.8
    container_name: influxdb
    env_file: .env
    environment:
      - INFLUX_HOST=localhost
    ports:
      - '${INFLUXDB_PORT}:${INFLUXDB_PORT}'
    volumes:
      - ./:/imports
      - influxdb_data:/var/lib/influxdb
    entrypoint: sh -c "influxd run -config /etc/influxdb/influxdb.conf & until influx -host localhost -execute 'CREATE DATABASE telegraf'; do echo waiting for influxdb; sleep 1; done; wait"
    networks:
      - logs_network

  telegraf:
    container_name: telegraf
    image: telegraf:1.29-alpine
    env_file: .env
    volumes:
      - ./telegraf/etc/telegraf.conf:/etc/telegraf/telegraf.conf:ro
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - influxdb
    links:
      - influxdb
    ports:
      - '${TELEGRAF_PORT}:${TELEGRAF_PORT}/udp'
    networks:
      - logs_network
    entrypoint: /bin/sh -c "chmod 666 /var/run/docker.sock && /entrypoint.sh telegraf"

  grafana:
    container_name: grafana
    image: grafana/grafana:8.0.2
    depends_on:
      - influxdb
    env_file: .env
    links:
      - influxdb
    ports:
      - '3001:3000'
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      - ./grafana/dashboards/:/var/lib/grafana/dashboards/
    networks:
      - logs_network
  
volumes:
  mysql:
  esdata:
  mysql-registry:
  app-registry:
  influxdb_data:
  grafana_data:

networks:
  logs_network:
    driver: bridge
